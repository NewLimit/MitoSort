#!/bin/pythonimport pysam as psimport pandas as pdimport numpy as npfrom multiprocessing import Poolfrom functools import partialimport osimport datetime from collections import defaultdictimport sysimport argparse## Set paramtersparser = argparse.ArgumentParser()parser.add_argument('--output_dir','-o', type=str,required=True, help='Output file path')args = parser.parse_args()output_dir=args.output_dirtemp_dir=os.path.join(output_dir,"MitoSort/temp")## Make directory SNP_matrix_dir=os.path.join(output_dir,"MitoSort/SNP_matrix")if not os.path.exists(SNP_matrix_dir):    os.mkdir(SNP_matrix_dir)def site_to_file(Position):##caculate site from which file    region = [item*2100 for item in range(8)]    diff = [abs(item*2100-Position) for item in range(8)]    min_region = min([abs(item*2100-Position) for item in range(8)])    seletect_region = region[diff.index(min_region)]    if Position >= seletect_region :         return(seletect_region,seletect_region+2100)    if Position < seletect_region :        return(seletect_region-2100,seletect_region)def fetch_site(site):    Position = int(site.split("-")[0])##site position    start_p,end_p = site_to_file(Position)    outname = "_".join((str(start_p),str(end_p)))    filename = temp_dir + "/" +outname+ ".bam"    in_sam = ps.AlignmentFile(filename, 'rb')    Ref = site.split("-")[1]    VarAllele = site.split("-")[2]    ref_base_calls_mtx = pd.DataFrame(0, index=[site], columns=barcodes, dtype=np.int16)    alt_base_calls_mtx = pd.DataFrame(0, index=[site], columns=barcodes, dtype=np.int16)    count = 0    Position = Position-1    test_dic1 = {}    test_dic2= {}    for i in barcodes:        test_dic1[i] = 0        test_dic2[i] = 0    for read in in_sam.fetch('chrM', Position, Position+1):        if read.has_tag(tag):            if (Position) in read.get_reference_positions():                base_index =  read.get_reference_positions().index(Position)                # if the read aligned positions cover the SNV position                barcode = read.get_tag(tag)                if barcode in barcodes:                                        count += 1                    base = read.query_sequence[ read.get_aligned_pairs(True)[base_index][0]]                    if base == Ref:                        test_dic1[barcode] += 1                    elif base == VarAllele:                        test_dic2[barcode] += 1    ref_base_calls_mtx  = pd.DataFrame([test_dic1],index=[site])    alt_base_calls_mtx  = pd.DataFrame([test_dic2],index=[site])    in_sam.close()    return(ref_base_calls_mtx,alt_base_calls_mtx)if __name__=='__main__':    today_date = datetime.date.today()    shown_date = today_date.strftime("%Y/%m/%d/")    now = datetime.datetime.now()    shown_time = now.strftime("%H:%M:%S")    print("["+ shown_date+" "+shown_time+"] Generating SNP matrices")    start = datetime.datetime.now()    bam_dir=os.path.join(output_dir,"MitoSort/temp/")    snv_file=os.path.join(output_dir,"MitoSort/BAM/possorted_chrM_realign.snv")    barcode_file=os.path.join(output_dir,"MitoSort/barcode/barcode_result.txt")    filtered_vcf = pd.read_csv(snv_file,sep="\t") ##germline snp    row_lit = []    blacklit = [302,309,312,313,316,514,515,523,524,3106,3107,3109,3110,16181]    for position, row in filtered_vcf.iterrows():        site_infor = str(row['Position']),row['Ref'],row['VarAllele']        fre = float(row['VarFreq'].split("%")[0])        if fre > 1.0 and fre <99.0 and row['Position'] not in blacklit:            row_lit.append("-".join(site_infor))    f = pd.read_csv(barcode_file,sep="\t") ##cellbarcodes    barcodes = {}    for position, row in f.iterrows():        i = str(row['barcode']).replace("-1","-1")##cell barcode in multi is CR and not '-1' in cell barcodes.        barcodes[i.strip()] = 0    barcodes_lit = list(barcodes)    tag="CB"     bam = bam_dir ##8 bam dir    result_frequency = os.path.join(SNP_matrix_dir,"frequency.csv")    result_alt = os.path.join(SNP_matrix_dir,"alt.csv")    result_ref = os.path.join(SNP_matrix_dir,"ref.csv")    pool = Pool(30)    result_list = pool.map(fetch_site,row_lit)    pool.close()    pool.join()    ref_matrix = pd.DataFrame(columns=barcodes, dtype=np.int16)    alt_matrix = pd.DataFrame(columns=barcodes, dtype=np.int16)    for j in result_list:        ref_matrix = pd.concat([ref_matrix,j[0]],axis=0,sort=True)##This is  queues,so reverse.        alt_matrix = pd.concat([alt_matrix,j[1]],axis=0,sort=True)    frequency_matrix = alt_matrix/(ref_matrix+alt_matrix)    frequency_matrix.to_csv(result_frequency)    ref_matrix.to_csv(result_ref)    alt_matrix.to_csv(result_alt)    end = datetime.datetime.now()     print("Total time:",str(end-start))